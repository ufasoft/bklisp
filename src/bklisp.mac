;;; Copyright (c) 2021-2022 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com
;;;
;;; SPDX-License-Identifier: MIT


;;; Lisp interpreter for BK-0010.01
;;; Version 2022
;;;
;;; Implements subset of COMMON LISP
;;; Uses Vilnus BASIC 1985 ROM (firmware 106, 107, 108)
;;;
;;; https://ufasoft.com/bklisp
;;;


.TITLE	bklisp

.INCLUDE	/macros.inc/


;; HEAP STRUCTURE
;;
;; -------------------------------
;; | BLOCK SIZE (# 4-byte cells) |
;; +-----------------------------+
;; | NEXT BLOCK PTR              |
;; -------------------------------
;;
;; SVALUE bit structure
;;
;; 000000: NIL
;; 1..FIXEND-1:  FIXNUM  biased by FIXOFF
;; 177777 #UNBOUND (V.U)
;; 177xxx:  CHARACTER with ASCII code xxx
;; xxxxxx < SUBR address: FIXNUM
;; Else if binary is xxxxx0 < HEAP address: SUBR
;; Else if binary is xxxxx1 < HEAP address: FSUBR
;; Else:
;;   Bits 0..1: Type
;;	 00: CONS,
;;	 01: if first WORD is:
;;		LIST: 	SYMBOL
;;		FIXNUM:	VECTOR
;;		SYMBOL:	INTERPRETED FUNCTION (LAMBDA) OR STREAM
;;	 02: DOUBLE (8 bytes)
;;	 03: STRING (vector of CHARACTER) max len 255
;;   Bits 2..1: Address if are in HEAP Range
;;
;;
;;  HEAP ENTRIES
;;
;;  SYMBOL STRUCTURE
;;  +---------------+
;;  | Property List | - may include property SYBOL-VALUE
;;  +---------------+
;;  |   Function    |
;;  +---------------+
;;  | Next in ObList|
;;  +---------------------------------------+
;;  | First word of RADIX-50 name or 0      |
;;  +---------------------------------------+
;;  |NameLen| Name  or rest of RADIX-50 name|   <- This is also  STRING OBJECT
;;  |---------------------------------------|
;;  |  chars ...                            |
;;  +---------------------------------------+
;;
;;  SIMPLE VECTOR STRUCTURE
;;  +---------------+
;;  | Len as FIXNUM |
;;  +---------------+
;;  | Element 0     |
;;  |   ...         |
;;  |Element (Len-1)|
;;  +---------------+
;;
;;  ARRAY STRUCTURE
;;  +-----------------------------+
;;  | -(TotalSize + 1)  as FIXNUM |
;;  +-----------------------------+
;;  | Dimensions (list)           |
;;  +-----------------------------+
;;  | Element 0                   |
;;  |   ...                       |
;;  | Element (TotalSize-1)       |
;;  +-----------------------------+
;;
;;  STRING STRUCTURE
;;  +-----------------+
;;  |Len BYTE (0..255)|
;;  +-----------------+
;;  | char 0          |
;;  |   ...           |
;;  | char (Len-1)    |
;;  +-----------------+
;;
;;  LAMBDA STRUCTURE
;;  ---------------------------
;;  | 'LAMBDA                 |
;;  +-------------------------+
;;  | LAMBDA LIST             |
;;  +-------------------------+
;;  | FUNCTION BODY           |
;;  +-------------------------+
;;  | LEXICAL ENVIRONMENT     |
;;  +-------------------------+
;;
;;  STREAM STRUCTURE
;;  ---------------------------
;;  | 'STREAM    	      |
;;  +-------------------------+
;;  | STRING OR FILE HANDLE   |
;;  +-------------------------+
;;  | POS	              |
;;  +-------------------------+
;;  | ENDPOS                  |
;;  +-------------------------+



SY.PREV=0


.ASECT

.GLOBL	START2
.GLOBL	A.END, A.PREV, HEAPFR, S.ISTM
.GLOBL	V.BIFU, V.ERR, V.FLT, V.FREQ, V.FUN, V.FUNC, V.GCNT, V.GO, V.BLOCK, V.IF, V.UNLESS, V.INT, V.LAMB, V.LAST, V.LET
.GLOBL	V.LETA, V.LIST, V.NULL, V.OPT, V.PBAS, V.PESC, V.PPP, V.PRAD, V.PROG, V.QUOT, V.REST, V.RNDS, V.S, V.SETF, V.SETQ, V.SPEC
.GLOBL	V.SPOP, V.STDI, V.STM, V.STR, V.CONS, V.SYM, V.SYVA, V.T, V.TAGB, V.CHAR, V.VEC, V.PSETQ, V.QUIT

.IIF NE C$MVAL,		.GLOBL	 V.D
.IIF NE C$MDAR, 	.GLOBL	 V.AR

.IF NE C$RT11
.	= 34
	.WORD	I.TRAP, 0		; don't mask interrupts for TRAP

.	= $USRSP
	.WORD	ASTKUP
.ENDC	; C$RT11


.IF EQ C$BK10
	.GLOBL	$RNDSAV, $III, $SAVJMP, $BUFOUT, $WSTOP

.	= 300

$III::	.BLKW	4	; Working Area of RND
$RNDSAV::
	.BLKW	4	; Current value of RND
$SAVJMP::
	.BLKW	1	; temporary var for saving return address
$BUF::	.BLKB	400	; Input buffer
$BUFOUT::.BLKB	30	; Output buffer

.ENDC ; C$BK10

.IF EQ C$RT11
	FILALG	= 512.									; Loader header for BK
	.IIF NE C$BK10	.	= 754
	;.IIF	NE C$BK11	.	= ASTKUP - 100. - 24				; Reserve 100. bytes as space for init code

	.IF NE C$BK11
		.	= ASTKUP - 4
		.WORD	ASTKUP								; Loader header: Start address
	.IFF
		.WORD	RETADR
	.ENDC ; C$BK11

	.WORD	<A.END + FILALG - 1 / FILALG * FILALG - RETADR>			; Loader header: Image size

RETADR:	BR	START								; in case if autorun does not work (loaded on BK-0011)
	.WORD	1000, 1000, 1000, 1000, 1000, 1000, 1000			; return addresses for auto-run, don't use label becase this code is relocatable
START:
	.IF NE C$BK11
	;; Move code above stack space
;		MOV	#A.END - <ASTKUP - 1000>, R1
;	1$:	MOV	-(R1), ASTKUP - 1000(R1)
;		CMP	R1, PC
;		BNE	1$
	.ENDC	; C$BK11

	JMP	@#START2
.ENDC ; C$RT11

;.IIF EQ C$BK10	.INCLUDE	/init.mac/

.IIF NE C$BK10	.	= ASTKUP

.INCLUDE	/gc.mac/	; Put GC code before SUBRs to give more space for FIXNUM values

.IIF NE C$BK11	EHEAP:	.WORD	HIMEME

.IF NE C$RT11
EHEAP:	.WORD	0
AREA:	.BLKW	2
SCCA:	.WORD	0
.ENDC	; C$RT11

H.STOP:	MOV	#$WSTOP, R1	; Handler of STOP key
I.STO2:
.IF NE C$BK10
	MOV	#$WSTOP+6, R2
	SUB	R1, R2
.IFF
	MOV	R1, R0
.ENDC ; C$BK10
	MOV	#ASTKUP, SP
M.PRIN::
	EMT	20
RESET::
.IIF NE C$BK10,	CLR	INEND		; flush input
	CLR	(PC)+
CATCH:	.WORD	0		; Stack pointer to catch errors
REPL:   CLR	LEXENV
	CLR	DYNENV
	CLR	R2		; *STANDARD-INPUT*, used also in .CONS
	.P.CHR	C.NL, '>
	.P.CHR	C.SP
	.$READ
	MOV	R1, R2
	MOV	#V.S, R1	; '-' Symbol
	.SET			; (SETQ - form); R1: read form

.IIF NE C$BK11	CLR	$SYREG	; Enable STOP key
	; CALL	EVAL		; Don't use .EVAL to save stack space in every evaluation
	.EVAL1

	MOV	R1, R2
	CLR	R1
	.FRESHL
	MOV	#V.PPP, R1
	.SET			; (SETQ +++ value)  to be rotated into *; R1: evaluated value
	CLR	R2
	.PRIN1			; Print evaluated value
.IF NE C$MVAL
	.CONS			; R2 == 0 HERE
	MOV	R1, R2
	MOV	#V.D, R1
	.SET			; Assign *** to be rotated into /
.ENDC	; C$MVAL
	MOV	#A.PREV-4, R5
	.SUBR	ROTATEF		; (ROTATEF - /// // / *** ** * +++ ++ +)
	BR	REPL

;;-- 12. words
LOADER::
 	MOV	#M.BIT, @#20
;	CLR	@#36
	CLR	R1
	CLR	(R1)+
	CLR	(R1)+			; Init NIL
.IF EQ C$RT11
	MOV	#I.STOP, (R1)+		; Init STOP key vector
	CLR	(R1)+
	MOV	#I.PCHR, (R1)+
	MOV	#I.TRAP, @#34
.IFF
	MOV	#I.PCHR, @#10
	.TRPSET	#AREA, #TRPLOC
	.SCCA	#AREA, #SCCA
.ENDC

	MOV	#ASTKUP, SP
	MOV	(PC)+, R1
A.MAIN:	.WORD	0
	BEQ	RESET
	CLR	R5
	CALL	FUNCALL
	.EXIT

.IF NE C$BK10
.	= $III		; 2060
	.BLKW 4		; USED BY $RAN
.	= $RNDSAV	; 2070
	.BLKW 4
.	= $SAVJMP	; 2134
	.WORD		0
.ENDC	; C$BK10

;;-- 90 words

I.STOP::
.IF NE C$RT11
	PUSH	R0, R1
	.TRPSET	#AREA, #TRPLOC	; Reset trap vectors
	POP	R1, R0
.IFF
	.IF NE C$BK10
		BIT	#$KBDI, $KBCTL	; GC is in progress?
		BEQ	H.STOP
		MOV	#H.STOP, GCRET	; Defer STOP handling to end of GC
	.IFF
		BR	H.STOP
      	.ENDC
.ENDC	; C$RT11
	RTI



;; Throw error if R1 is not function name: SYMBOL os (SETF SYMBOL)
;; Returns  true if R1 - symbol
FUNAMP:	.SYMP
	BCS.T
	CMP	(R1)+, #V.SETF
	BNE.E
	MOV	(R1), R1
	.POP1
	BEQ.E			; check (SETF symbol)
	RETURN

ASUBRT:	.WORD	ASUBR1, ASUBR2, ASUBR3			; , ASUBR4
FSUBRT:	.WORD	FSUBR1, FSUBR2, FSUBR3, E.FSUBR


DOPREP:	POP	R3		; SP is caller's SP
	CALL	BLENV0		; (BLOCK NIL ...
	PUSH	R3
	PUSH	R5		; Save Body
	MOV	R1, R5
	.POP5			; R1: var
	.CONS
	MOV	R1, R3
	TST	(R3)+
	MOV	LEXENV, R2
	.CONS
	MOV	R1, R0
	.POP5			; R1: list-for/count-form
	.EVAL1
	MOV	R0, LEXENV	; SET ENVIRONMENT
	MOV	(R5), R4	; R4: result-form
	POP	R5
	RETURN

;; Bind symbol in R1 to argument in (R5) and add to environment in R4
BNARG1:	MOV	(R5)+, R2
;; Bind symbol in R1 to argument in R2 and add to environment in R4
BNARG:	MOV	(R5), R5	; R5: (CDR of args)
BNARG2:	.CONS
	MOV	R4, R2
	.CONS
	MOV	R1, R4		; R4: New environment
	RETURN


;;;--- Threaded code subroutines

;; Negate FLT4 on Stack
DNEG:	MOV	#100000, R5
	XOR	R5, (SP)
	JMP	@(R4)+


;; Push PI/2
PUPID2:	MOV	#$PIDV2 + 10, R1
	BR	DDUP1

;; Duplicate FLT4 on STACK
DDUP:	MOV	SP, R1
	ADD	#10, R1
DDUP1:	JMP	$PUSH8


;; SWAP TWO FLT4 ON STACK
DSWAP:	MOV	#4, R0
	MOV	SP, R5
1$:	MOV	(R5), R1
	MOV	10(R5), (R5)+
	MOV	R1, 6(R5)
	SOB	R0, 1$
R.R4:	JMP	@(R4)+



;; Copy $III, $RNDSAV into random-state
B.III:	MOV	#$III, R2
	MOV	(PC)+, R3
A.RDNS:	.WORD	0
DCP13:	CALL	COPY4
	MOV	(PC)+, R3
B.RDNS:	.WORD	0
DCP23:	CALL	COPY4
	JMP	@(R4)+

;; Push R1, R2 as FLT4; swap(R1, R2)
DPUR12:	PU.FL
DPUR2:	.SWP12
	PU.FL
	JMP	@(R4)+

.IF NE C$BK10
.	= $BUF-2	; 2422
	.WORD	0	; used by GENSYM
.	= $BUF
	.BLKB	400	; USED BY IVEIL TO READ LINE

.	= $BUFOUT	; 3022
	.BLKB	30	; USED BY BASIC $UNPCK
E.SYS:			; End address of system area
.ENDC	; C$BK10

.IF NE C$RAD40
	.INCLUDE	/rad40.mac/
.IFF
	.INCLUDE	/rad50.mac/
.ENDC

.IF NE C$MDAR

.IF NE 0	; COMMENT OUT  TEMPORARY!!!
;; R1: list of FIXNUM dimensions
;; Returns R1: product as UINT
MULDIM:	MOV	#1, R5
	BR	3$
1$:	MOV	R5, R4
	CLR	R5
2$:	ADD	R4, R5
	SOB	R0, 2$
3$:	.POP1
	BEQ	9$
	SUB	#V.0, R0
	BNE	1$		; non-zero multiplier
	CLR	R5
9$:	MOV	R5, R1		; product
	RETURN
.ENDC		; COMMENT OUT  TEMPORARY!!!

;; Fills array elements
;; Input: R1: dimenstion, R2: pointer, R5: array as list structure
FILLAR:	PUSH	R0, R1
	.POP1			; R0: dimension
	BEQ	7$
	SUB	#FIXOFF, R0
	BEQ	8$
4$:	TST	R5
	BEQ.E			; number of elements inconsistent with dimension
	PUSH	2(R5)
	MOV	(R5), R5
	CALL	FILLAR
	POP	R5
	SOB	R0, 4$
	BR	8$
7$:	MOV	R5, (R2)+
8$:	POP	R1, R0
	RETURN

.ENDC	; C$MDAR

.IF NE C$BK10
P.ERR:	MOV	#$ERROR, R1
	MOV	#8., R2
	EMT	20
.ENDC ; C$BK10

.IF NE C$BK11
$ERROR: .ASCII	<C.CY.O><C.CY.W><C.CY.I><C.CY.B><C.CY.K><C.CY.A>/ /<C.BEL><200>		; 'ERROR' in russian
	.EVEN
P.ERR:	MOV	#$ERROR, R0
	.PRINT
.ENDC ; C$BK11

.IF NE C$RT11
$ERROR: .ASCIZ	/ ERROR/<C.BEL>
	.EVEN
P.ERR:	.PRINT	#$ERROR
.ENDC ; C$RT11
	RETURN


;; Return: true if char is constituent
CSTITP:	MOV	#TERM, R2
	MOV	#E.TER - TERM, R3
1$:	CMPB	R1, (R2)+
	BEQ.F
	SOB	R3, 1$
	BICB	#200, R1
	CMPB	#40, R1
	B.CF

;; Find place in property-list
;; Input: R1: symbol, R2: property-indicater
;; Returns: R5: (pointer to place)+2, R4: pointer to current list item; ZF=1, R5=0 if not found
PLSPLC: T.SYM
.IIF EQ C$VM1,	DEC	R1
PLSPL4:	MOV	R1, R5
PLSPL2:	MOV	R5, R4		; R4: &tail
	MOV	(R4), R5	; R5: Property-list
;; Assume ZF: R5==0
PLSPL1:	BEQ	9$
	MOV	(R5)+, R0	; R0: property name
	MOV	(R5), R5
	TST	(R5)+		; R5: &tail
	CMP	R0, R2
	BNE	PLSPL2        	; continue search
	CLZ
9$:	RETURN


.IF NE C$BK10
;; Prepare filename argument for File API
;; R1: filename as STRING object
PSNAME: MOV	#15, R4		; #words of param block segment
1$:	PUSH	#20040		; Spaces
	SOB	R4, 1$
	MOV	SP, R4
	T.STR
	SUB	#3, R1
	MOVB	(R1)+, R2	; filename length
	BIC	#177760, R2	; limit length by 16. chars, but really need 12.
2$:	MOVB	(R1)+, (R4)+
	SOB	R2, 2$
	JMP	(R5)
.ENDC	; C$BK10

ASIN1:	.BASN
	.WORD	DDUP, DDUP, $DMUL, $PUSH1, DSWAP, $DSUB, $SQRT, $DDIV, $ATAN, R.R4

ACOS1:	.BASN
	.WORD	ASIN1, PUPID2, DSWAP, $DSUB, R.R4

.IF NE C$RAD40
	R40TAB:	.ASCII	/*-+12/
.IFF
	R50TAB:	.ASCII	/*-=0123456789/
.ENDC

TERM:	.ASCII	<C.SEMI>/()"'`, /
E.TER:	.EVEN

.IIF EQ C$BK10	.INCLUDE	/math.mac/
.INCLUDE	/trap.mac/


FIXEND:
.INCLUDE	/subr.mac/
.INCLUDE	/fsubr.mac/

;;---order does matter, used in PLACE----------
;BLSSGN:	.ASCII	/BLS0/
DYNENV:	.WORD 	0		; Dynamic Environment
;;---------------------------------------------

;; Roots (order does matter)
ROOTS:
REPLLS:	.WORD	A.PREV-4	; Special vars used by REPL
LEXENV:	.WORD 	0		; Lexical Environment
OBLIST:	.WORD 	V.LAST
PRVTIM:	.WORD	V.0		; Last timestamp returned by (GET-INTERNAL-REAL-TIME)
E.ROOT:

;; EHEAP:	.WORD	HIMEM 	; same as $ANVP

ALGN4
A.LTYP:	.ASCIP	<Ufasoft BkLisp>

ALGN4
A.LVER:	.ASCIP	<2022>

ALGN4
A.MTYP:	.ASCIP	<PDP-11>

.IF NE C$RT11
ALGN4
A.SVER:	.ASCIP	<5.0>        ;!!!TODO determine OS version at runtime
ALGN4
A.STYP:	.ASCIP	<RT-11>
.ENDC

;;------Order does matter: ROOM uses zero from FREEL-2 word
ALGN4
A.EMPTY:.ASCII	<0>//
.EVEN
FREEL:	.WORD	HEAPFRE
;;;----

ALGN4
A.NIL:	.ASCIP	<NIL>

ALGN4
A.MVER:
.IIF NE C$BK10		.ASCII	<10.><C.CY.B><C.CY.K>/-0010.01/
.IIF NE C$BK11		.ASCII	<8.><C.CY.B><C.CY.K>/-0011/<C.CY.M>

;;----Order does matter. Used by NAME-CHAR
ALGN4
A.SPAC:	.ASCIP	<SPACE>

ALGN4
A.RETU:	.ASCIP	<RETURN>

ALGN4
A.NEWL:	.ASCIP	<NEWLINE>

ALGN4
A.TAB:	.ASCIP	<TAB>
;;------------


ALGN4
A.MS:	.ASCII	<3>/ms/<C.NL>

ALGN4
A.ROOM: .ASCII	<11.>/Bytes free/<C.NL>

ALGN4
A.GSYM: .ASCIP	<~A~A>			; used by GENSYM

VS.NIL	= A.NIL + 3
V.EMPTY	= A.EMPTY + 3
V.MTYP	= A.MTYP + 3
V.MVER	= A.MVER + 3
V.LTYP	= A.LTYP + 3
V.LVER	= A.LVER + 3
V.GSYM 	= A.GSYM + 3

.IF NE C$RT11
V.STYP	= A.STYP + 3
V.SVER	= A.SVER + 3
.ENDC

ALGN4
TOKLEN:	.BYTE	0
TOKBUF:	.BLKB	MAXTOK


ALGN4
F32768:	.FLT4	32768.
.IIF NE C$RT11	F65536:	.FLT4	65536.


ALGN4

;	ALGN32		; Align to 32 bytes to simplify GC bit operations
;HEAP:

.IIF NE C$AMAL .INCLUDE	/symdef.mac/


.END	START2
