;;; Copyright (c) 2021-2022 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com,  Sergey Pavlov  mailto:dev@ufasoft.com
;;;
;;; SPDX-License-Identifier: MIT


.SBTTL	TRAP instruction handlers

;; Offsets in Stack insie TRAP handler

; R4.OFF	= 0	; to avoid explicit 0
R3.OFF	= 2
R2.OFF	= 4
R0.OFF	= 6
PC.OFF	= 10
R5.OFF	= 12
ST.OFF	= 14	; First Work Before Stack Frame ;   Number Of Saved Bytes In Stack Frame


;;----------Order does matter. Used in PRESUB
SUBRS:	.WORD	LENGTH	, CONS	, FUNCALL , PRIN1  , EVAL1	, READ1	, PEEKCH	, CHRUP
	.WORD	SYVAL	, SET	, R.CHRT  , R.CHR0 , P5EVL	, MKAR	, FORMAT	, LAST
	.WORD	CPTREE, SUBST1	, CAR
.IIF NE C$MDAR,	.WORD	ARDIMS
.IIF NE	C$FILE	.WORD	R50FN


;;---------------------------

PREDS: 	.WORD	SYMP	, VECP	, W.CH2	, WRITE1, STREQ	   , ZEROP, MEMBER, INTP
	.WORD	EQL	, UNR.CH, PRINT	, CSTITP, GC	   , P.STR., CONSP, LISTP
	.WORD	BOUNDP	, FRESHL, FUNAMP, PROGN	, SORT34   , OPENP
.IIF NE C$MDAR,	.WORD	ARP


;; Starts with TRAP 60
TRAPS::
PLACE$:	.WORD	PLACE.		; position used in .PLAC1
ALL.1$:	.WORD	ALL.12		; DON'T move
LISTN$:	.WORD	LISTN.
BETWE$:	.WORD	BETWE.
ALL.2$:	.WORD	ALL.12		; DON'T move
BIND$:	.WORD	BIND.
BASIC$:	.WORD	BASIC.
;CALL3$:	.WORD	CALL3.
;FI16R$:	.WORD	FI16R.
PU.FL$:	.WORD	PU.FL.
PO.FL$:	.WORD	PO.FL.
RPOFL$:	.WORD	R.POFL
ALLOC$:	.WORD	ALLOC.
DF2$:	.WORD	DF2.
DF1NI$:	.WORD	DF1NI.
TYCOD$:	.WORD	TYCOD.
ATRUE$:	.WORD	ATRUE.
F.U16$:	.WORD	F.U16.
;DF3NI$:	.WORD	DF3NI.
POP1$:	.WORD	POP1.
;POP5$:	.WORD	POP5.
;STMTO$:	.WORD	STM.TO
GPLAC$:	.WORD	GPLAC.
TOU16$:	.WORD	TOU16.
NOWPU$:	.WORD	NOW.PU
FUNTO$:	.WORD	FUN.TO
TCASE$:	.WORD	TCASE.
;CCASE$:	.WORD	CCASE.
SUBR$:	.WORD	SUBR.
SYVAL$:	.WORD	SYVAL.
.IIF EQ C$BK10, FPUM1$:	.WORD	FPUM1.
.IIF NE C$RT11,	SYS$:	.WORD	SYS.


.IF NE C$RT11
TRPLOC::
	BCS	I.TRA9		; vector 4 -> RETURN
	PUSH	R0, R1		; vector 10
	.TRPSET	#AREA, #TRPLOC	; Reset trap vectors
	POP	R1, R0
	BR	I.PCHR		;!!!TODO review it
I.STOP::
	PUSH	R1, R0
	.TRPSET	#AREA, #TRPLOC	; Reset trap vectors
	POP	R0
	BR	I.PCH9		; POP R1; RTI
.ENDC	; C$RT11


;; TRAP instruction handler.
;; Saves all registers except R1
I.TRAP::
	PUSH	R0, R2, R3, R4
	PUSH	R5.OFF(SP)		; PSW
	MOV	R5, R5.OFF+2(SP)
	MOV	PC.OFF+2(SP), R4	; Get PC after CALL instruction.
	PUSH	-(R4)			; Decode TRAP instruction
	ASL	(SP)
	PUSH	(R4)+			; (SP): opcode; (SP+2): opcode * 2; (SP+4): PSW
	BIC	#177437, (SP)
	ADD	#TRPSEC, (SP)
I.TRA9:	RETURN

ERRN.1:	MOV	#ASTKUP, SP
	CALL	P.ERR
	MOVB	-2(R4), R5
	CALL	$P.INT			; Don't use PRINT here as the state may be corrupted
	MOV	ERDATA, R1
	BEQ	I.ST1A
	CLR	R2
.IIF EQ C$BK10,	.P.CHR	C.SP		; BASIC's $P.INT prints space
I.ST1P:	.PRIN1
I.ST1A:	MOV	#$WNL, R1
	JMP	I.STO2
;;-----


NOW.PU:	.SUBR	GETTIM
;; PU.FL - PUSH FLOAT
PU.FL.: MOV	#8., R3
	CALL	INSER.
	PUSH	R1
	MOV	R1, R2
	MOV	SP, R5
	MOV	SP, R3
	ADD	#ST.OFF+2, R3
	.FIXP
	BCC	PUFL1.
	SUB	#FIXOFF, R1
	PUSH	R1
	.BASN
	.WORD	$ID, PUFL2.		; Int to Double




;; Error handlers
;;-- 10. words
TRPSEC:	MOV	#ERRN., (SP)
	RTI
ERRN.:  MOV	#CATCH, R3
        TST	(R3)
	BEQ	ERRN.1
;; Print error R5 and reset to REPL
	MOV	(R3), SP
	CLR	(R3)
	BR	E.RTI6

;;-- 6 words
ACOS1:	.BASN
	.WORD	ASIN1, PUPID2, DSWAP, $DSUB, R.R4
;;---



;; Call TRAP 2/4-word TRAP handlers
.	= TRPSEC + B.2.4
TRP24:	ASL	(SP)
	ADD	#A.TRAP - <OP.TRAP + B.2.4 * 4>, (SP)
	RTI

ASIN1:	.BASN
	.WORD	DDUP, DDUP, $DMUL, $PUSH1, DSWAP, $DSUB, $SQRT, $DDIV, $ATAN, R.R4

;;-- Space 1 word


;; Call TRAP 2/4-word TRAP handlers
.	= TRPSEC + B.2.4+40
;;-- 1 word
	BR	TRP24


;;-- 7 words
;; Handler of	.P.CHR ch
I.PCHR::
	PUSH	R1
	MOV	2(SP), R1
	MOV	-(R1), R1
	.W.CH2			; (WRITE-CHAR R1 R2)
I.PCH9:	POP	R1
	RTI
;;-----



;;-- 4 words
SUBR4.:	PUSH	R0
	CLR	R0
	TST	R1		; To set ZF on R1==0
	JMP	@(SP)+
;;----



;;-- 4 words
COPY4:	CALL	(PC)
	MOV	(R2)+, (R3)+
	MOV	(R2)+, (R3)+
	RETURN
;;--



;; Call .SUBR SUBRS(index)
.	= TRPSEC + B.SUBR
;;-- 6 words
	ADD	#SUBRS-<OP.TRAP + B.SUBR * 2>, (SP)
	MOV	@(SP)+, R0
	BIC	#FLAG.C, (SP)
	BR	PRESUB

;;-- 8 words
;; Insert R3/2 Words into Stack
;; Returns: R5: beginning of free Stack area
INSER.:	MOV	SP, R2
	SUB	R3, SP
	MOV	SP, R5
	MOV	#ST.OFF/2 + 1, R3	; Size of Stack Frame
1$:	MOV	(R2)+, (R5)+
	SOB	R3, 1$
RET.1:	RETURN
;;----

;;-- 2 words
F.U16B:	PO.FL
E.RTI6:	BR	E.RTI2
;; -----


;; Call .PRED PREDS(index)
.	= TRPSEC + B.PRED
;;-- 8 words
	ADD	#PREDS-<OP.TRAP + B.PRED * 2>, (SP)
	MOV	@(SP)+, R0
	BIS	#FLAG.C, (SP)
PRESUB:	PUSH	#SUBR3.
	RTI

;	ASL	(SP)
;	ADD	#A.TRAP - <OP.TRAP + 60 * 4>, (SP)
;	RTI

;;-- 3 words
SYVAL.:	MOV	(R4)+, R1
	.SYVAL
	BR	E.6TRP
;;----



;;-- 5 words
DF1NI.:	CMP	R1, #V.U
	BNE	E.TRP8
	CLR	R1
	BR	E.TRP8



.	= TRPSEC + B.TYP
TRPTYP:	MOV	#1$, (SP)
	RTI
1$:	.TYCOD
	ADD	#OP.TRAP + B.TYP, R0
	CMP	R0, -(R4)
	BR	B.ZF.


;;---  6 words
;; TO.FUN macro
FUN.TO:	.PRED	FUNP
	BCS	E.RTI6
	.SUBR	FBOUNDP
	BR	BEQ.E.
;;--------

.	= TRPSEC + B.LONG
;;---  4/5 words
TRPLON:	ADD	#TRAPS - <OP.TRAP + B.LONG * 2>, (SP)
.IF NE C$VM1
	MOV	@(SP)+, -(SP)
.IFF
	MOV	@(SP), (SP)
.ENDC
RTI.1:	RTI


;;---  7 words
;; Macro .DF2 v
;; Default value for R2
DF2.:	MOV	(R4)+, R3
	CMP	R2, #V.U
	BNE	1$
	MOV	R3, R2.OFF(SP)
1$:
	BR	E.6TRP
;;--------

;;-- 4 words
PUFL1.:	.FLTP
	BCC	ER.TYP
	TST	-(R2)
	BR	PUFL3.
;;----


.	= TRPSEC + B.TYPP
TRPTPP: MOV	#H.TYPP, (SP)

.IF NE C$RT11
	ASL	(PC)+
SCCA::	.WORD	0
	BCC	RTI.1
	JMP	H.STOP		; CTRL/C, CTRL/C
.IFF
	RTI
.ENDC ; C$RT11

H.TYPP:	.TYCOD
	ADD	#OP.TRAP + B.TYPP, R0
	CMP	R0, -(R4)
	BEQ	SEC.
	BR	CLC.


SUBR.:  CLC
SUBR2.:	MOV	(R4)+, R0
	MOV	R4, PC.OFF(SP)
SUBR3.:	MOV	(SP), R4	; Assume R4.OFF == 0
	PUSH	#E.TRP7
	BCC	SUBR4.		; .SUBR case
	MOV	R1, (SP)	; .PRED case
	CALL	SUBR4.
	TST	R1
	BEQ	PCLC1.
	POP	R1
SEC.:	SEC
	BR	E.RTI3

ATRUE.:	MOV	#V.T, R1
B.RET1:	MOV	#RET.1, R4
E.6TRP:	BR	E.4TRP


PUFL2.: MOV	SP, R2
PUFL3.:	CALL	COPY4
	MOV	R5, SP
PCLC.:	POP	R1
CLC.:	CLC
;	BR	E.RTI3		; fallback
;; Starting 2/4-word TRAP handler address
A.TRAP:
;;-- # 0
BCS.E.:	BCC	E.RTI3
	.E.UNK

BEQ.E.:	BNE	E.RTI3
	.E.UNK

SWP12.:	MOV	R1, R2.OFF(SP)
	MOV	R2, R1
E.TRP8:	BR	E.TRP0



AFALS.:	CLR	R1
	BR	B.RET1

;; TO.STM
STM.TO:	.DF1.NIL
	BEQ	1$
	CMP	R1, #V.T
	BNE	2$
1$:	.SYVAL	V.STDIN		; *STANDARD-INPUT* / *STANDARD-OUTPUT*
2$:	.OPENP
	BCS	E.TRP1
	.E.IO


;;-- # 20

BNE.E.:	BEQ	E.RTI3
	.E.UNK

BCC.E.:	BCS	E.RTI3
	.E.UNK

BCC.F.:	BCC	AFALS.
E.RTI2:	BR	E.RTI3

BCS.F.:	BCS	AFALS.
	BR	E.RTI3

BEQ.F.:	BEQ	AFALS.
	BR	E.RTI3


BNE.F.:	BNE	AFALS.
	BR	E.RTI3

BCS.T.:	BCS	ATRUE.
	BR	E.RTI3


BEQ.T.:	BEQ	ATRUE.
	BR	E.RTI3


B.NCF.:	BCC	ATRUE.
	BR	AFALS.


;;-- 8. words
;; Macro .CCASE
;; Searches byte value in R1 in array
;;!!!TODO
CCASE.:	MOV	(R4)+, R0		; COUNT
1$:	CMPB	(R4)+, R1
	BEQ	E.CASE
	INC	R4
	SOB	R0, 1$
E.4TRP:	MOV	R4, PC.OFF(SP)
E.TRP1:	BR	E.TRP7
;;----




B.CF.:	BCS	ATRUE.
	BR	AFALS.

B.ZF.:	BEQ	ATRUE.
	BR	AFALS.

B.NZF.:	BNE	ATRUE.
	BR	AFALS.


CONS.T:	.CONSP
	BR	ENSTYP

;; T.SYM  (THE SYMBOL x)
SYM.T:	.SYMP
	BR	ENSTYP

STR.T:	.STRP
	BR	ENSTYP

T.CHR.:	.CHARP
ENSTYP:	BCS	E.TRP1
ER.TYP:	.E.TYP		; Type error
	NOP

PRED.:	SEC		; flag to save R1
	BR	SUBR2.

;; Shift
SH210.:	MOV	R1, R2.OFF(SP)
R0.RTI:	MOV	R0, R1
	BR	E.RTI3



SWP01.:	MOV	R1, R0.OFF(SP)
	MOV	R0, R1
E.TRP0:	BR	E.TRP7

;; CONVERT R1, R2 TO INT16
TI16B.:	TO.I16
 	.SWP12
 	TO.I16
 	BR	SWP12.


;; .PUSH0
PUSH0.:	MOV	R0, R2
	MOV	R1, R0
	.CONS
	BR	SWP01.

.IF NE C$BK10
.	= A.TRAP + <110 - B.2.4 * 4>
;; Called by BASIC
;; R2: line length, R3: $BUF
T110:	ADD	#14, SP
	POP	R1		; R1: end of line
;	ADD	R2, R3
;	MOV	R3, R1
	MOVB	#C.NL, (R1)+		; terminate line by NL
	JMP	GETLI1
	NOP
.ENDC	; C$BK10

T.VEC.:	.VECP
	BR	ENSTYP

.IF NE C$MDAR
T.AR.:	.ARP
	BR	ENSTYP
.ENDC


;; .NREV0
NREV0.:	MOV	R0, R1
	.SUBR	NREVERSE
	BR	E.RTI3


;; TO.I16
TOI16.:	PU.FL
	.BASIC	$DI
PCLC1.:	BR	PCLC.

;; .BASN MACRO
BASN.:	MOV	(R4)+, PC.OFF(SP)
	MOV	R4, (SP)		; Assume R4.OFF == 0
E.RTI3:	BR	E.RTI1


;;-- 6 words
DF3NI.:	CMP	R3, #V.U
	BNE	E.TRP1
	CLR	R3.OFF(SP)
	BR	E.TRP1
;;----

POP5.:	TST	R5
        BEQ	E.RTI1
        MFPS	R3
        MOV	R5, R1
        T.CONS
        MOV	(R5)+, R1
        MOV	(R5), R5
	BR	E.RTK

;; FI16.R
FI16R.:	MOV	#RET.1, PC.OFF(SP)
	.BETWE	FIXEND-FIXOFF, 1-FIXOFF	;!!!?
	BCS	FI16RC
RFI16:	ADD	#FIXOFF, R1
E.TRP7:	BR	E.TRAP

;;---------end of 2/4-word Routines

.IF NE C$RT11
SYS.:
	EMT	160 + TESTCH	; Old API: .CLOSE #TESTCH
	MOV	#AREA+2, R0
        MOV	#$BUFOUT, (R0)	; set dblk
        MOV	(R4)+, -(R0)	; set syscall# & channel #0 (TESTCH)
        MOV	R4, PC.OFF(SP)
        EMT	375
        BR	R0.RTI		; MOV R0, R1;  BR E:RTI.   Keep CF
.ENDC	; C$RT11


;; .BETWE
;; LOWER <= R1 < UPPER
BETWE.:	ADD	#4, PC.OFF(SP)
	CMP	(R4)+, R1
	BHI	E.RTI8		; CF=0
	CMP	R1, (R4)
	BR	E.RTI8
;;---


BIND.:	MOV	#6, R3
	CALL	INSER.
	MOV	SP, R5
	ADD	#ST.OFF + 4, R5
	MOV	DYNENV, (R5)
	MOV	(R4)+, -(R5)
	MOV	(R4)+, -(R5)
	MOV	R5, DYNENV
	BR	E.4TRP

TCASE.:	.TYCOD
	ADD	R0, R4
E.CASE:	MOVB	(R4), R4
	ASL	R4
	ADD	R4, PC.OFF(SP)
E.RTI8:	BR	E.RTI



GPLAC.:
1$:     T.SYM
	BEQ.E
	MOV	#DYNENV-4, R5
3$:	CMP	(R5), R1
	BEQ	PLAC9
	MOV	4(R5), R5
4$:	BNE	3$
	MOV	#V.SYVA, R2
	CALL	PLSPL4
	BEQ	E.RTI8
	TST	-(R5)		; R5 -= 2
	BR	PLAC5


FI16RC:	PUSH	R1
	.BASN
	.WORD	$ID, F.U16B	; TO DOUBLE


;;-- 10.words
;; .PLACE Macro
;; R1: symbol
;; RETURN: R3: address of place; ZF=1 if unbound
PLACE.:	MOV	#LEXENV, R5
6$:	MOV	(R5), R5
	BEQ	GPLAC.
	CMP	@(R5)+, R1
	BNE	6$
	MOV	-(R5), R5
PLAC9:	TST	(R5)+		; R5 += 2
PLAC5:	MOV	R5, (SP)	; Assume R4.OFF == 0
E.RTI1:	BR	E.RTI


;; F.U16
F.U16.:	CMP	R1, #FIXEND-FIXOFF
	BCS	RFI16
	SUB	#100000, R1
	PUSH	R1
	.BASN
	.WORD	$ID,  DPUFL, F32768+2, $DADD, F.U16B

BASCON:	MFPS	-(SP)			; Continuation of BASIC.
	MOV	#$BUFOUT + ST.OFF, R3
	MOV	-(R3), R5
	MOV	#R5.OFF/2, R2
4$:	MOV	-(R3), -(SP)
	SOB	R2, 4$			; Restore registers
	BR	R.BAS


;; TO.U16
TOU16.: MOV	#F32768+2, R2
	.BASN
	.WORD	DPUR12, $DSUB, $DI, 1$
1$:	ADD	#100000, (SP)
P1.TRP:	POP	R1
;; This code is in the middle of TRAP handlers to avoid long jumps
E.TRAP:	TST	R1        		; SET ZF = bool(R1==0)
E.RTI:	MFPS	R3
E.RTJ:	MOV	R5.OFF(SP), R5
E.RTK:	MOV	R3, R5.OFF(SP)
R.BAS:	POP	R4, R3
	.CKSTK
.IF NE C$BK10
	JMP	$RTI20        		; POP R2, R0; RTI
.IFF
	POP	R2, R0
	RTI
.ENDC

TYCOD.: CLR	R0
	PUSH	R1
	BEQ	Q.NULL
	CMP	R1, #FIXEND
	BLO	Q.FIXN
	CMP	R1, #V.CHB
	BHIS	Q.CHAR
	CMP	R1, #A.FSUBR
	BLO	Q.FUN
	CMP     R1, #E.FSUBR
	BLO	Q.SPOP
	MOV	R1, R2
	ASR	R2
	BCS	1$
	ASR	R2
	BCC	Q.CONS
	BR	Q.FLT
1$:	ASR	R2
	BCS	Q.STR
.IIF EQ C$VM1	DEC	R1
	MOV	(R1), R1
	;to save stack .LISTP
	BEQ	Q.SYMB
.IF NE C$MDAR
	CMP	R1, #V.0	; R1 - negative for ARRAYS
	BCS     Q.ARR
.ENDC
	CMP	R1, #FIXEND
	BCS	Q.VEC		; R1 - fixnum
	CMP	R1, #V.LAMB
	BEQ	Q.LAMB
	CMP	R1, #V.STM
	BEQ	Q.STM
.IF NE C$FILE
	CMP	R1, #V.FILE
	BEQ	Q.FILE
.ENDC
	BR	Q.SYMB		;!!!TODO check R1 is list here
.IIF NE C$FILE,		Q.FILE:	INC	R0
.IIF NE C$MDAR,		Q.ARR:	INC	R0
Q.SPOP:	INC	R0
Q.LAMB:	INC	R0
Q.FUN:	INC	R0
Q.VEC:	INC	R0
Q.STR:	INC	R0
Q.STM:	INC	R0
Q.FLT:	INC	R0
Q.SYMB:	INC	R0
Q.CONS:	INC	R0
Q.CHAR:	INC	R0
Q.FIXN:	INC	R0
Q.NULL:	MOV	R0, R0.OFF+2(SP)
	BR	P1.TRP


;; POFL.R - Pop FLOAT and return
R.POFL:	MOV	#RET.1, PC.OFF(SP)	; return after this operation
;; PO.FL - POP FLOAT
PO.FL.:	.ALL.2
	MOV	SP, R4
	ADD	#ST.OFF, R4
	MOV	(R4)+, (R1)+
	MOV	(R4)+, (R1)+
	MOV	(R4)+, (R1)+
	MOV	(R4)+, (R1)
	CMP	-(R1), -(R1)		; R1: DOUBLE object
;; Remove words from Stack until R4
REMOV.:	MOV	SP, R0
	ADD	#ST.OFF, R0
1$:	MOV	-(R0), -(R4)
	CMP	R0, SP
	BNE	1$
	MOV	R4, SP
E.TRP6:	BR	E.TRAP


POP1.:	MOV	R1, R5
	.POP5
	MFPS	R3
	MOV	R1, R0.OFF(SP)	; works for NIL too
	MOV	R5, R1
	BR	E.RTJ		; R3: result flags

ALL.12:	MOV	-(R4), R5
	SUB	#OP.TRAP + B.LONG + <ALL.1$-TRAPS/2> - 4, R5
ALLOC.: CALL	MALLOC
	.GC			; No free space, try GC
	PUSH	#$TRAP7		; Out of memory
; Allocate Heap object
; R5 = Size in bytes
; On success returns from TRAP with R1 pointing to allocated memory initialized by zeros
; On fail returns to ALLOC.
MALLOC:	ADD	#3, R5
	BIC	#3, R5		; adjust R5 to be multiple of 4
	MOV	#FREEL, R1
1$:	MOV	R1, R3		; R1, R3 = &next
	MOV	(R1), R1
	BEQ	RE.LIS		; RETURN
	CMP	R5, (R1)+
	BHI	1$
	BNE	MALLO2
	MOV	(R1), (R3)	; Exclude Cell from free list
.IIF EQ C$RT11, MALLO2:
3$:	MOV	-(R1), (SP)	; Use return address as temp var (SP): size in bytes
MALLO4:	SUB	R5, (R1)	; trim free block
	ADD	(SP)+, R1	; Skip return address; R1: address behind allocated memory
5$:	CLRB	-(R1)		; Initialize cells
	SOB	R5, 5$
E.RTI9:	BR	E.RTI		; R1: allocated memory
.IF NE C$RT11								; On RT-11 allocate begnning with lower addresses for .SAV trimming in SAVE
MALLO2:	ADD	R1, R5
	MOV	(R1), (R5)	; (R5): pointer to next Free Block
	MOV	-(R1), -(R5)	; size in bytes of ree block
	MOV	R5, (R3)	; adjust pointer to this free block
	SUB	R1, R5		; R5: allocation size
	ADD	R5, R1		; R1: pointer to new free block
	CLR	(SP)
	BR	MALLO4
.ENDC ; C$RT11

.IF EQ C$BK10
;; 4 times  FPUSH -(R1)
FPUM1.:
	MOV	#8., R3
	MOV	R3, R0
	CALL	INSER.
	ADD	R0, R5
1$:	MOVB	-(R1), -(R5)
	SOB	R0, 1$
	BR	E.RTI9
.ENDC ; C$BK10


;; .LISTN
LISTN.:	MOV	R0, R1
	BEQ	E.TRP6
	MOV	SP, R4
	ADD	#ST.OFF, R4
	CLR	R2
1$:	MOV	(R4)+, R1
	.CONS
	MOV	R1, R2
	SOB	R0, 1$
	BR	REMOV.

;; .BASIC MACRO
BASIC.:	MOV	(R4)+, 2$
	MOV	R4, PC.OFF(SP)
	MOV	#$BUFOUT, R3
	MOV	#ST.OFF/2, R2
1$:     MOV	(SP)+, (R3)+
	SOB	R2, 1$                  ; Save registers
	.BASN
2$:	.WORD	0, BASCON
